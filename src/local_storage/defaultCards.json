[
  {
    "category": "Utilidades",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1000,
        "title": "Evaluar",
        "description": "Evaluar expresión para intentar obtener un valor numérico",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión a evaluar",
            "content": null
          }
        ],
        "latexCode": "\\text{eval}\\left({#1}\\right)",
        "pythonCode": "def main(f):\n  return sympify(f).evalf()"
      },
      {
        "ID_CARD": 1001,
        "title": "Simplificar",
        "description": "Escribe una ecuación algebraica para simplificar",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión Algebraica",
            "content": null
          }
        ],
        "latexCode": "\\text{simplify}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return simplify(sympify(x))"
      },
      {
        "ID_CARD": 1002,
        "title": "Factorizar",
        "description": "Escribe una ecuación algebraica para factorizar",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión Algebraica",
            "content": null
          }
        ],
        "latexCode": "\\text{factorize}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return factor(sympify(x))"
      },
      {
        "ID_CARD": 1003,
        "title": "Expandir",
        "description": "Escribe una ecuación algebraica reducida para expandirla",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión Algebraica",
            "content": null
          }
        ],
        "latexCode": "\\text{expand}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return expand(sympify(x))"
      },
      {
        "ID_CARD": 1004,
        "title": "Fraccionar",
        "description": "Convierte un número decimal a su equivalente fraccionario",
        "params": [
          {
            "symbol": "n",
            "description": "Número a fraccionar",
            "content": null
          }
        ],
        "latexCode": "\\text{fractionate}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return nsimplify(sympify(x))"
      },
      {
        "ID_CARD": 1005,
        "title": "Obtener raíces",
        "description": "Escriba la ecuación algebraica y determine el valor de las raíces reales presentes",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión a resolver",
            "content": null
          }
        ],
        "latexCode": "\\text{roots}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return solve(sympify(x))"
      },
      {
        "ID_CARD": 1006,
        "title": "Aproximar",
        "description": "Cambia el número de cifras significativas en una expresión",
        "params": [
          {
            "symbol": "n",
            "description": "Número decimal a aproximar",
            "content": null
          },
          {
            "symbol": "c",
            "description": "Cifras significativas",
            "content": null
          }
        ],
        "latexCode": "\\text{aprox}\\left({#1} , {#2}\\right)",
        "pythonCode": "def main(x, y):\n  return round(sympify(x), sympify(y))"
      },
      {
        "ID_CARD": 1007,
        "title": "Redondear",
        "description": "Aproxima un número decimal a numero entero",
        "params": [
          {
            "symbol": "n",
            "description": "Número decimal a aproximar",
            "content": null
          }
        ],
        "latexCode": "\\text{round}\\left({#1}\\right)",
        "pythonCode": "def main(x):\n  return round(sympify(x))"
      },
      {
        "ID_CARD": 1008,
        "title": "Piso",
        "description": "Aproxima un número decimal al numero entero inmediatamente menor",
        "params": [
          {
            "symbol": "n",
            "description": "Número decimal a aplicar el piso",
            "content": null
          }
        ],
        "latexCode": "\\left\\lfloor{#1}\\right\\rfloor",
        "pythonCode": "def main(x):\n  return floor(sympify(x))"
      },
      {
        "ID_CARD": 1009,
        "title": "Techo",
        "description": "Aproxima un número decimal al numero entero inmediatamente mayor",
        "params": [
          {
            "symbol": "n",
            "description": "Número decimal a aplicar el techo",
            "content": null
          }
        ],
        "latexCode": "\\left\\lceil{#1}\\right\\rceil",
        "pythonCode": "def main(x):\n  return ceiling(sympify(x))"
      },
      {
        "ID_CARD": 1010,
        "title": "Mínimo",
        "description": "Obtener el valor mínimo entre dos valores",
        "params": [
          {
            "symbol": "n",
            "description": "Primer valor",
            "content": null
          },
          {
            "symbol": "m",
            "description": "Segundo valor",
            "content": null
          }
        ],
        "latexCode": "\\text{min}\\left({#1}, {#2}\\right)",
        "pythonCode": "def main(n, m):\n  return min(sympify(n), sympify(m))"
      },
      {
        "ID_CARD": 1011,
        "title": "Máximo",
        "description": "Obtener el valor máximo entre dos valores",
        "params": [
          {
            "symbol": "n",
            "description": "Primer valor",
            "content": null
          },
          {
            "symbol": "m",
            "description": "Segundo valor",
            "content": null
          }
        ],
        "latexCode": "\\text{max}\\left({#1}, {#2}\\right)",
        "pythonCode": "def main(n, m):\n  return Max(sympify(n), sympify(m))"
      }
    ]
  },
  {
    "category": "Conversiones",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1012,
        "title": "Grados a Radianes",
        "description": "Convierte grados a radianes",
        "params": [
          {
            "symbol": "n",
            "description": "Valor en radianes",
            "content": null
          }
        ],
        "latexCode": "\\text{rad}\\left({#1}\\right)",
        "pythonCode": "def main(n):\n  return sympify(n)*pi/180"
      },
      {
        "ID_CARD": 1013,
        "title": "Radianes a Grados",
        "description": "Convierte Radianes a Grados",
        "params": [
          {
            "symbol": "n",
            "description": "Valor en grados",
            "content": null
          }
        ],
        "latexCode": "\\text{grad}\\left({#1}\\right)",
        "pythonCode": "def main(n):\n  return sympify(n)*180/pi"
      }
    ]
  },
  {
    "category": "Constantes",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1014,
        "title": "Pi",
        "description": "Constante Pi",
        "params": [],
        "latexCode": "\\pi",
        "pythonCode": "def main():\n  return pi"
      },
      {
        "ID_CARD": 1015,
        "title": "Euler",
        "description": "Constante de Euler",
        "params": [],
        "latexCode": "e",
        "pythonCode": "def main():\n  return E"
      },
      {
        "ID_CARD": 1016,
        "title": "Infinito positivo",
        "description": "Representación de la tendencia hacia el infinito",
        "params": [],
        "latexCode": "\\infty",
        "pythonCode": "def main():\n  return oo"
      },
      {
        "ID_CARD": 1017,
        "title": "Infinito negativo",
        "description": "Representación de la tendencia hacia el menos infinito",
        "params": [],
        "latexCode": "-\\infty",
        "pythonCode": "def main():\n  return -oo"
      }
    ]
  },
  {
    "category": "Aritmética",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1019,
        "title": "Suma",
        "description": "Suma de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "{#1} + {#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) + sympify(y)"
      },
      {
        "ID_CARD": 1020,
        "title": "Resta",
        "description": "Resta de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "{#1} - {#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) - sympify(y)"
      },
      {
        "ID_CARD": 1021,
        "title": "Multiplicación (Forma 1)",
        "description": "Multiplicación de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "{#1} \\cdot {#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) * sympify(y)"
      },
      {
        "ID_CARD": -1,
        "title": "Multiplicación (Forma 2)",
        "description": "Multiplicación de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "{#1} \\times {#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) * sympify(y)"
      },
      {
        "ID_CARD": -1,
        "title": "Multiplicación (Forma 3)",
        "description": "Multiplicación de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "\\left({#1}\\right)\\left({#2}\\right)",
        "pythonCode": "def main(x, y):\n  return sympify(x) * sympify(y)"
      },
      {
        "ID_CARD": -1,
        "title": "Multiplicación (Forma 4)",
        "description": "Multiplicación de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término",
            "content": null
          }
        ],
        "latexCode": "{#1}{#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) * sympify(y)"
      },
      {
        "ID_CARD": 1022,
        "title": "División (Forma 1)",
        "description": "División de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término (Numerador)",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término (Denominador)",
            "content": null
          }
        ],
        "latexCode": "\\frac{#1}{#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) / sympify(y)"
      },
      {
        "ID_CARD": -1,
        "title": "División (Forma 2)",
        "description": "División de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término (Numerador)",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término (Denominador)",
            "content": null
          }
        ],
        "latexCode": "{#1}/{#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) / sympify(y)"
      },
      {
        "ID_CARD": -1,
        "title": "División (Forma 3)",
        "description": "División de dos términos",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término (Numerador)",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término (Denominador)",
            "content": null
          }
        ],
        "latexCode": "{#1}\\div{#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) / sympify(y)"
      },
      {
        "ID_CARD": 1023,
        "title": "Potencia",
        "description": "Elevar un termino a otro término",
        "params": [
          {
            "symbol": "x",
            "description": "Primer término (Base)",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Segundo término (Potencia)",
            "content": null
          }
        ],
        "latexCode": "{#1}^{#2}",
        "pythonCode": "def main(x, y):\n  return sympify(x) ** sympify(y)"
      },
      {
        "ID_CARD": 1024,
        "title": "Raíz cuadrada",
        "description": "Raíz cuadrada de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "\\sqrt{#1}",
        "pythonCode": "def main(x):\n  return sqrt(sympify(x))"
      },
      {
        "ID_CARD": 1025,
        "title": "Raíz n-ésima",
        "description": "Raíz n-ésima de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Indice n-ésimo de la raíz",
            "content": null
          }
        ],
        "latexCode": "\\sqrt[#2]{#1}",
        "pythonCode": "def main(x, y):\n  return Pow(sympify(x), Rational(1, sympify(y)))"
      },
      {
        "ID_CARD": 1026,
        "title": "Exponencial",
        "description": "Exponencial de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "e^{#1}",
        "pythonCode": "def main(x):\n  return exp(x)"
      },
      {
        "ID_CARD": 1027,
        "title": "Logaritmo natural",
        "description": "Logaritmo natural de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "\\log{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return log(x)"
      },
      {
        "ID_CARD": 1028,
        "title": "Logaritmo general",
        "description": "Logaritmo en la base especificada de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          },
          {
            "symbol": "y",
            "description": "Base",
            "content": null
          }
        ],
        "latexCode": "\\log_{#2}{\\left({#1}\\right)}",
        "pythonCode": "def main(x, y):\n  return log(x, y)"
      },
      {
        "ID_CARD": 1018,
        "title": "Inverso aditivo",
        "description": "Inverso aditivo de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "-{#1}",
        "pythonCode": "def main(x):\n  return -sympify(x)"
      },
      {
        "ID_CARD": -1,
        "title": "Inverso multiplicativo",
        "description": "Inverso multiplicativo de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "{#1}^{-1}",
        "pythonCode": "def main(x):\n  return 1 / sympify(x)"
      },
      {
        "ID_CARD": -1,
        "title": "Valor Absoluto",
        "description": "Valor absoluto de un término",
        "params": [
          {
            "symbol": "x",
            "description": "Término",
            "content": null
          }
        ],
        "latexCode": "|{#1}|",
        "pythonCode": "def main(x):\n  return abs(x)"
      }
    ]
  },
  {
    "category": "Trigonometría",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1029,
        "title": "Seno",
        "description": "Seno trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\sin{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return sin(x)"
      },
      {
        "ID_CARD": 1030,
        "title": "Coseno",
        "description": "Coseno trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\cos{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return cos(x)"
      },
      {
        "ID_CARD": 1031,
        "title": "Tangente",
        "description": "Tangente trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\tan{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return tan(x)"
      },
      {
        "ID_CARD": 1032,
        "title": "Cotangente",
        "description": "Cotangente trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\cot{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return cot(x)"
      },
      {
        "ID_CARD": 1033,
        "title": "Secante",
        "description": "Secante trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\sec{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return sec(x)"
      },
      {
        "ID_CARD": 1034,
        "title": "Cosecante",
        "description": "Cosecante trigonométrico de un ángulo",
        "params": [
          {
            "symbol": "x",
            "description": "Ángulo en radianes",
            "content": null
          }
        ],
        "latexCode": "\\csc{\\left({#1}\\right)}",
        "pythonCode": "def main(x):\n  return csc(x)"
      }
    ]
  },
  {
    "category": "Cálculo diferencial",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1035,
        "title": "Límite",
        "description": "Límite de una expresión cuando una variable tiende a un valor",
        "params": [
          {
            "symbol": "x",
            "description": "Variable",
            "content": null
          },
          {
            "symbol": "h",
            "description": "Tendencia",
            "content": null
          },
          {
            "symbol": "f",
            "description": "Expresión",
            "content": null
          }
        ],
        "latexCode": "\\lim_{{#1}\\longrightarrow{#2}}{\\left({#3}\\right)}",
        "pythonCode": "def main(x, h, f):\n  return limit(f, x, h)"
      },
      {
        "ID_CARD": 1036,
        "title": "Derivada",
        "description": "Derivada en una variable de una expresión",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión matemática",
            "content": null
          },
          {
            "symbol": "x",
            "description": "Variable sobre el cual se realiza la derivación",
            "content": null
          }
        ],
        "latexCode": "\\frac{d}{d{#2}}{\\left({#1}\\right)}",
        "pythonCode": "def main(f, x):\n  return diff(f, x)"
      },
      {
        "ID_CARD": 1037,
        "title": "N-ésima derivada",
        "description": "N-ésima derivada en una variable de una expresión",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión matemática",
            "content": null
          },
          {
            "symbol": "x",
            "description": "Variable sobre el cual se realiza la derivación",
            "content": null
          },
          {
            "symbol": "n",
            "description": "Número de derivadas a realizar",
            "content": null
          }
        ],
        "latexCode": "\\frac{d^{#3}}{d{#2}^{#3}}{\\left({#1}\\right)}",
        "pythonCode": "def main(f, x, n):\n  return diff(f, x, n)"
      }
    ]
  },
  {
    "category": "Cálculo integral",
    "expanded": false,
    "content": [
      {
        "ID_CARD": 1038,
        "title": "Integral indefinida",
        "description": "Integral indefinida en una variable de una expresión",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión matemática",
            "content": null
          },
          {
            "symbol": "x",
            "description": "Variable sobre el cual se realiza la integración",
            "content": null
          }
        ],
        "latexCode": "\\int {#1}\\ d{#2}",
        "pythonCode": "def main(f_x, x):\n  return integrate(f_x, Symbol(x))"
      },
      {
        "ID_CARD": 1039,
        "title": "Integral definida",
        "description": "Integral definida en una variable de una expresión",
        "params": [
          {
            "symbol": "f",
            "description": "Expresión matemática",
            "content": null
          },
          {
            "symbol": "x",
            "description": "Variable sobre el cual se realiza la integración",
            "content": null
          },
          {
            "symbol": "a",
            "description": "Límite inferior",
            "content": null
          },
          {
            "symbol": "b",
            "description": "Límite superior",
            "content": null
          }
        ],
        "latexCode": "\\int_{#3}^{#4} {#1}\\ d{#2}",
        "pythonCode": "def main(f_x, x, a, b):\n  return integrate(f_x, (Symbol(x), sympify(a), sympify(b)))"
      }
    ]
  }
]
